# -*- coding: utf-8 -*-
"""SaleAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rHEHLTRRL1JLKnwjCPfHP8b4AzwTCWZw

# Sale Analysis

## Importing Necessary Libraries
"""

import pandas as pd
import os

"""### Task 1: Merging 12 months of sales data into a single file"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/own_my_own/Pandas-Data-Science-Tasks-master/SalesAnalysis/Sales_Data/Sales_April_2019.csv")

files = [file for file in os.listdir('/content/drive/MyDrive/own_my_own/Pandas-Data-Science-Tasks-master/SalesAnalysis/Sales_Data')]

# Sort files to ensure the months are in the correct order
files.sort()  # You can adjust the sorting if the filenames are more complex (e.g., month name or year)

# Initialize an empty DataFrame
all_months_data = pd.DataFrame()

# Loop through the sorted files and read them
for file in files:
    # Check if the file is a CSV file
    if file.endswith('.csv'):
        df = pd.read_csv("/content/drive/MyDrive/own_my_own/Pandas-Data-Science-Tasks-master/SalesAnalysis/Sales_Data/" + file)
        all_months_data = pd.concat([all_months_data, df])

# Save the concatenated DataFrame to a CSV
all_months_data.to_csv("all_data.csv", index=False)

"""#### Read in updated dataframe"""

all_data = pd.read_csv("all_data.csv")
all_data.head()

"""### Cleanup the data!

#### Drop rows NaN
"""

nan_df = all_data[all_data.isna().any(axis=1)]
nan_df.head()

all_data = all_data.dropna(how='all')
all_data.head()

"""#### Find 'Or' and delete it!"""

all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']

"""#### Convert columns to the correct type"""

all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])# Make int
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])# Make float

all_data.head()

"""Augment data with addtional columns

### Task 2: Add 'Month' column
"""

all_data['Month'] = all_data['Order Date'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')
all_data.head()

"""### Task 3: Add 'Sales' column"""

all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
all_data.head(5)

"""### Task 4: Add a 'City' column"""

#let's use .apply()

def get_city(address):
    return address.split(',')[1]

def get_state(address):
    return address.split(',')[2].split(' ')[1 ]

all_data['City'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)} ({get_state(x)})")


all_data.head()

"""##**Question 1: What was the best month for sales? How much was earned that month?**"""

all_data.groupby('Month').sum()['Sales']

results = all_data.groupby('Month').sum()

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter
import numpy as np

# Modern theme setup
sns.set_theme(style="whitegrid")

# Monthly sales data
months = list(range(1, 13))
sales = np.array([
    1822256.73, 2202022.42, 2807100.38, 3390670.24, 3152606.75,
    2577802.26, 2647775.76, 2244467.88, 2097560.13, 3736726.88,
    3199603.20, 4613443.34
])

# Formatter for millions
def million_formatter(x, _):
    if x >= 1e6:
        return f'{x/1e6:.1f}M'
    return f'{x:.0f}'

# Barplot drawing (smaller plot size and blue color)
plt.figure(figsize=(10, 5))  # Adjusted size
sns.barplot(x=months, y=sales, color="#3776ab", legend=False)  # All bars in blue

# Y-axis formatting
plt.gca().yaxis.set_major_formatter(FuncFormatter(million_formatter))

# Chart title and axis labels
plt.xlabel('Months', fontsize=14)
plt.ylabel('Sales', fontsize=14)

# Adding value labels above bars
for i, value in enumerate(sales):
    plt.text(i, value + 100000, f'{value:,.0f}', ha='center', fontsize=10)

# Removing borders for a cleaner look
sns.despine()
plt.tight_layout()
plt.show()

plt.show()



"""##**Question2: What city had the highest number of sales?**"""

results = all_data.groupby('City').sum()
results

import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# City names
cities = [city for city, df in all_data.groupby('City')]

# Sales data (assuming you have the sales data in 'results['Sales']')
sales = results['Sales']

# Formatter to display sales in millions
def million_formatter(x, _):
    if x >= 1e6:
        return f'{x/1e6:.1f}M'
    return f'{x:.0f}'

# Barplot drawing
plt.figure(figsize=(10, 6))
plt.bar(cities, sales)

# Rotate x-ticks for better readability
plt.xticks(cities, rotation='vertical', size=8)

# Formatting y-axis to show sales in millions
plt.gca().yaxis.set_major_formatter(FuncFormatter(million_formatter))

# Labels
plt.ylabel('Sales in USD($)')
plt.xlabel('City name')

# Display the plot
plt.tight_layout()
plt.show()

"""##**Question 3: What time should we display advertisements to maximize likelihood of customer's buying product?**"""

all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])

all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Date'].dt.minute
all_data.head()

hours = cities = [hour for hour, df in all_data.groupby('Hour')]

plt.plot(hours, all_data.groupby(['Hour']).count())
plt.xticks(hours)
plt.xlabel('Hour')
plt.ylabel('Number of Orders')
plt.show()

"""##Question 4: What products are most often sold together?"""

df = all_data[all_data['Order ID'].duplicated(keep=False)]

df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))

df = df[['Order ID', 'Grouped']].drop_duplicates()

from itertools import combinations
from collections import Counter

count = Counter()

for row in df['Grouped']:
    row_list = row.split(',')
    count.update(Counter(combinations(row_list, 2)))

for key, value in count.most_common(10):
    print(key, value)

"""##**Question 5: What product sold the most? Why do you think it sold the most?**"""

all_data.head()

product_group = all_data.groupby('Product')

numeric_columns = all_data.select_dtypes(include=['int64', 'float64'])
product_group = numeric_columns.groupby(all_data['Product']).sum()
product_group.head(100)

quantity_ordered = product_group['Quantity Ordered']

# Get the product names
products = product_group.index

plt.figure(figsize=(8, 5))
plt.bar(products, quantity_ordered)

plt.xticks(rotation=90, size=8)
plt.xlabel('Product Name')
plt.ylabel('Quantity Ordered')

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Assuming prices and quantity_ordered are already calculated
prices = all_data.groupby('Product')['Price Each'].mean()

fig, ax1 = plt.subplots()

# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()

# Plot the bar chart for quantity ordered
ax1.bar(products, quantity_ordered, color='g', alpha=0.6)

# Plot the line chart for prices
ax2.plot(products, prices, 'b-')

# Labeling the axes
ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Ordered', color='g')
ax2.set_ylabel('Price ($)', color='b')

ax1.set_xticklabels(products,rotation='vertical', size=8)  # Rotate x-axis labels for better visibility
plt.tight_layout()  # Adjust layout to prevent overlapping
plt.show()